package dev._2lstudios.exploitfixer.modules;

import java.io.File;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.logging.Logger;

import dev._2lstudios.exploitfixer.configuration.IConfiguration;
import dev._2lstudios.exploitfixer.utils.IConfigurationUtil;

public class MessagesModule implements IMessagesModule {
    private static String NOTFOUND_STRING = "<STRING_%PATH%_NOT_FOUND>";
    private IConfigurationUtil configurationUtil;
    private Logger logger;
    private String version;
    private Map<String, Map<String, String>> locales = new HashMap<>();
    private Collection<String> defaultLocales = new HashSet<>();
    private String web;
    private String defaultLocale;

    public MessagesModule(IConfigurationUtil configurationUtil, Logger logger, String version) {
        this.configurationUtil = configurationUtil;
        this.logger = logger;
        this.version = version;

        defaultLocales.add("de");
        defaultLocales.add("en");
        defaultLocales.add("es");
        defaultLocales.add("fr");
        defaultLocales.add("he");
        defaultLocales.add("hu");
        defaultLocales.add("it");
        defaultLocales.add("ja");
        defaultLocales.add("ko");
        defaultLocales.add("nl");
        defaultLocales.add("pl");
        defaultLocales.add("pt");
        defaultLocales.add("ro");
        defaultLocales.add("ru");
        defaultLocales.add("th");
        defaultLocales.add("tr");
        defaultLocales.add("zh");
        defaultLocales.add("zhtw");
    }

    public void putSection(IConfiguration langFile, Map<String, String> locale, String currentPath) {
        for (String key : langFile.getKeys()) {
            IConfiguration section = langFile.getSection(key);

            if (section != null) {
                if (currentPath.isEmpty()) {
                    putSection(section, locale, key);
                } else {
                    putSection(section, locale, currentPath + "." + key);
                }
            } else {
                if (currentPath.isEmpty()) {
                    locale.put(key, langFile.getString(key));
                } else {
                    locale.put(currentPath + "." + key, langFile.getString(key));
                }
            }
        }
    }

    public void reload(IConfiguration configYml, File localeFolder) {
        web = configYml.getString("web", "<WEB_NOT_FOUND> (Reset ExploitFixer config file)");
        defaultLocale = configYml.getString("locale", "en").toLowerCase();

        for (String locale : defaultLocales) {
            configurationUtil.create("%datafolder%/locales/" + locale + ".yml", "locales/" + locale + ".yml");
        }

        for (File file : localeFolder.listFiles()) {
            String fileName = file.getName();

            try {
                IConfiguration langFile = configurationUtil.get(file.toPath().toString());
                Map<String, String> locale = new HashMap<>();

                putSection(langFile, locale, "");

                locales.put(fileName.substring(0, 2).toLowerCase(), locale);
            } catch (Exception ex) {
                logger.info(
                        "Wasn't able to load locale " + fileName + " because of a " + ex.getClass().getName() + "!");
            }
        }
    }

    public boolean isEnabled() {
        return true;
    }

    public String getName() {
        return "Messages";
    }

    @Override
    public String getString(String locale, String path) {
        String string;

        if (locale != null && locales.containsKey(locale)) {
            string = locales.get(locale).getOrDefault(path, NOTFOUND_STRING.replace("%PATH%", path.toUpperCase()));
        } else if (locales.containsKey(defaultLocale)) {
            string = locales.get(defaultLocale).getOrDefault(path, NOTFOUND_STRING.replace("%PATH%", path.toUpperCase()));
        } else if (locale != null) {
            string = NOTFOUND_STRING.replace("%PATH%", locale.toUpperCase());
        } else {
            string = NOTFOUND_STRING.replace("%PATH%", "<NULL>");
        }

        return string.replace("%version%", version).replace("%web%", web).replace('&', '\u00a7');
    }

    public String getReload(String locale) {
        return getString(locale, "commands.reload");
    }

    public String getHelp(String locale) {
        return getString(locale, "commands.help");
    }

    public String getUnknown(String locale) {
        return getString(locale, "commands.error.unknown");
    }

    public String getPermission(String locale) {
        return getString(locale, "commands.error.permission");
    }

    public String getConsole(String locale) {
        return getString(locale, "commands.error.console");
    }

    public String getEnable(String locale) {
        return getString(locale, "commands.notifications.enable");
    }

    public String getDisable(String locale) {
        return getString(locale, "commands.notifications.disable");
    }

    public String getKickMessage(IModule module, String locale) {
        return getString(locale, "modules." + module.getName().toLowerCase() + ".kick_message");
    }

    public String getKickMessage(String module, String locale) {
        return getString(locale, "modules." + module.toLowerCase() + ".kick_message");
    }

    public String getStats(String locale) {
        return getString(locale, "commands.stats");
    }

    public String getMojangDown(String locale) {
        return getString(locale, "mojang_down");
    }
}
