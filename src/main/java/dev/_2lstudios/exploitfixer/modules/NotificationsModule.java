package dev._2lstudios.exploitfixer.modules;

import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.logging.Logger;

import org.bukkit.Server;
import org.bukkit.entity.Player;

import dev._2lstudios.exploitfixer.configuration.IConfiguration;
import dev._2lstudios.exploitfixer.exploit.ExploitPlayer;
import net.md_5.bungee.api.chat.ComponentBuilder;
import net.md_5.bungee.api.chat.HoverEvent;
import net.md_5.bungee.api.chat.TextComponent;

public class NotificationsModule implements INotificationsModule {
    private Server server;
    private Logger logger;
    private Map<String, Integer> packetDebug = new HashMap<>();
    private Collection<String> notifications = new HashSet<>();
    private boolean enabled, debug;
    private String message;

    // Violations done per category
    private Map<String, Double> categorizedVls = new HashMap<>();

    public void clearCategorizedVls() {
        this.categorizedVls.clear();
    }

    public Map<String, Double> getCategorizedVls() {
        return categorizedVls;
    }

    public void addCategorizedVl(String name, double amount) {
        if (amount <= 0) {
            return;
        }

        this.categorizedVls.put(name, this.categorizedVls.getOrDefault(name, 0D) + amount);
    }

    public NotificationsModule(Server server, Logger logger) {
        this.server = server;
        this.logger = logger;
    }

    public String getMessage() {
        return message;
    }

    public void reload(IConfiguration configYml) {
        this.enabled = configYml.getBoolean("notifications.enabled");
        this.debug = configYml.getBoolean("notifications.debug");
        this.message = configYml.getString("notifications.message").replace('&', '\u00A7');
    }

    @Override
    public boolean isEnabled() {
        return this.enabled;
    }

    public void addPacketDebug(String packetType) {
        if (this.debug) {
            packetDebug.put(packetType, packetDebug.getOrDefault(packetType, 0) + 1);
        }
    }

    public void debugPackets() {
        if (!this.debug) {
            return;
        }

        if (!categorizedVls.isEmpty()) {
            StringBuilder stringBuilder = new StringBuilder();
            Set<Entry<String, Double>> entries = new HashSet<>(categorizedVls.entrySet());
            int total = 0;

            stringBuilder.append("Categorized Violations (x%total%):");

            categorizedVls.clear();

            for (Entry<String, Double> vlsCategory : entries) {
                double value = (double) ((int) (vlsCategory.getValue() * 1000)) / 1000;

                if (value <= 0) {
                    continue;
                }

                if (total++ != 0) {
                    stringBuilder.append(",");
                }

                stringBuilder.append(" " + vlsCategory.getKey() + " " + value);
            }

            debug(stringBuilder.toString().replace("%total%", String.valueOf(total)));
        }

        int total = 0;

        if (!packetDebug.isEmpty()) {
            StringBuilder stringBuilder = new StringBuilder();
            Set<Entry<String, Integer>> entries = new HashSet<>(packetDebug.entrySet());
            stringBuilder.append("Received Packets (x%total%):");

            packetDebug.clear();

            for (Entry<String, Integer> packetEntry : entries) {
                String packetType = packetEntry.getKey();
                int amount = packetEntry.getValue();

                if (total != 0) {
                    stringBuilder.append(",");
                }

                stringBuilder.append(" x").append(amount).append(" ").append(packetType);
                total += amount;
            }

            debug(stringBuilder.toString().replace("%total%", String.valueOf(total)));
        }
    }

    public void debug(String message) {
        if (this.debug) {
            this.logger.info(message);
        }
    }

    public void setNotifications(String playerName, boolean input) {
        if (input) {
            notifications.add(playerName);
        } else {
            notifications.remove(playerName);
        }
    }

    public boolean isNotifications(String playerName) {
        return notifications.contains(playerName);
    }

    public boolean isDebug() {
        return debug;
    }

    public Collection<String> getNotifications() {
        return notifications;
    }

    public void sendNotification(String check, ExploitPlayer player, int violations) {
        if (isEnabled() && player != null) {
            int ping = player.getPing();
            String notification = getMessage().replace("%player%", player.getName()).replace("%check%", check)
                    .replace("%ping%", String.valueOf(ping)).replace("%vls%", String.valueOf(violations));
            String packets = player.getPacketsText();
            TextComponent textNotification = new TextComponent(notification);
            textNotification.setHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, new ComponentBuilder(packets).create()));

            server.getConsoleSender().sendMessage(notification);

            for (String notificationPlayerName : getNotifications()) {
                Player notificationPlayer = server.getPlayer(notificationPlayerName);

                if (notificationPlayer != null) {
                    notificationPlayer.spigot().sendMessage(textNotification);
                }
            }
        }
    }

    @Override
    public String getName() {
        return "Notifications";
    }
}