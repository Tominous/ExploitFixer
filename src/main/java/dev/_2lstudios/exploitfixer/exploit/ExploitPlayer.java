package dev._2lstudios.exploitfixer.exploit;

import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.UUID;
import java.util.Map.Entry;
import java.util.concurrent.ConcurrentHashMap;

import dev._2lstudios.exploitfixer.modules.IViolationModule;

public abstract class ExploitPlayer {
    private UUID uuid;
    private Map<IViolationModule, Double> violations = new HashMap<>();
    private Map<String, Integer> packets = new ConcurrentHashMap<>();
    private Collection<Collection<String>> punishments = new HashSet<>();
    private int packetCount = 0;
    private long lastViolation = 0;
    private long lastPortalUse = 0;
    private long lastShear = 0;

    public ExploitPlayer(UUID uuid) {
        this.uuid = uuid;
    }

    public void clearPunishments() {
        this.punishments.clear();
    }

    public Collection<Collection<String>> getPunishments() {
        return punishments;
    }

    public long getLastViolation() {
        return lastViolation;
    }

    public void setLastViolation(long lastPortalUse) {
        this.lastViolation = lastPortalUse;
    }

    public long getLastPortalUse() {
        return lastPortalUse;
    }

    public void setLastPortalUse(long lastPortalUse) {
        this.lastPortalUse = lastPortalUse;
    }

    public Map<IViolationModule, Double> getViolations() {
        return violations;
    }

    public double getViolations(IViolationModule module) {
        return violations.getOrDefault(module, 0D);
    }

    public UUID getUUID() {
        return uuid;
    }

    public abstract String getName();

    public abstract int getPing();

    public abstract String getLocale();

    public boolean hasShearCooldown() {
        return System.currentTimeMillis() - lastShear <= 1000;
    }

    public void setShearCooldown() {
        lastShear = System.currentTimeMillis();
    }

    public void addPacket(String packetName) {
        packetCount++;
        packets.put(packetName, packets.getOrDefault(packetName, 0) + 1);
    }

    public void clearPackets() {
        packetCount = 0;
        packets.clear();
    }

    public String getPacketsText() {
        StringBuilder stringBuilder = new StringBuilder("Received Packets (x" + packetCount + "):");

        for (Entry<String, Integer> packet : packets.entrySet()) {
            stringBuilder.append("\n- x" + packet.getValue() + " " + packet.getKey());
        }

        return stringBuilder.toString();
    }
}