package dev._2lstudios.exploitfixer.listener;

import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerTeleportEvent;

import dev._2lstudios.exploitfixer.exploit.ExploitPlayer;
import dev._2lstudios.exploitfixer.managers.ExploitPlayerManager;
import dev._2lstudios.exploitfixer.managers.ModuleManager;
import dev._2lstudios.exploitfixer.modules.EventsModule;
import dev._2lstudios.exploitfixer.modules.NotificationsModule;

public class PlayerTeleportListener implements Listener {
    private ExploitPlayerManager exploitPlayerManager;
    private NotificationsModule notificationsModule;
    private EventsModule eventsModule;

    PlayerTeleportListener(ModuleManager moduleManager) {
        this.exploitPlayerManager = moduleManager.getExploitPlayerManager();
        this.notificationsModule = moduleManager.getNotificationsModule();
        this.eventsModule = moduleManager.getEventsModule();
    }

    @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)
    public void onPlayerTeleport(PlayerTeleportEvent event) {
        if (eventsModule.isPortalCrash()) {
            String cause = event.getCause().name();

            if (cause.equals("END_PORTAL") || cause.equals("END_GATEWAY") || cause.equals("NETHER_PORTAL")) {
                Player player = event.getPlayer();
                ExploitPlayer exploitPlayer = exploitPlayerManager.get(player);

                if (exploitPlayer != null) {
                    long currentTime = System.currentTimeMillis();
                    long lastPortalUse = currentTime - exploitPlayer.getLastPortalUse();

                    if (lastPortalUse <= 1000) {
                        event.setCancelled(true);
                        notificationsModule.debug("[Events] Too fast portal teleport was cancelled.");
                    } else {
                        exploitPlayer.setLastPortalUse(currentTime);
                    }
                }
            }
        }
    }
}
