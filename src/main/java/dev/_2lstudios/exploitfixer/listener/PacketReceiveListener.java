package dev._2lstudios.exploitfixer.listener;

import java.util.Map;
import java.util.Map.Entry;

import org.bukkit.Bukkit;
import org.bukkit.GameMode;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.Cancellable;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.InventoryView;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.PlayerInventory;

import dev._2lstudios.exploitfixer.enums.CheckItemResult;
import dev._2lstudios.exploitfixer.exploit.BukkitExploitPlayer;
import dev._2lstudios.exploitfixer.managers.ExploitPlayerManager;
import dev._2lstudios.exploitfixer.managers.ModuleManager;
import dev._2lstudios.exploitfixer.modules.ItemsFixModule;
import dev._2lstudios.exploitfixer.modules.NotificationsModule;
import dev._2lstudios.exploitfixer.modules.PacketsModule;
import dev._2lstudios.exploitfixer.utils.ExploitUtil;
import dev._2lstudios.hamsterapi.enums.PacketType;
import dev._2lstudios.hamsterapi.events.PacketReceiveEvent;
import dev._2lstudios.hamsterapi.hamsterplayer.HamsterPlayer;
import dev._2lstudios.hamsterapi.wrappers.PacketWrapper;

public class PacketReceiveListener implements Listener {
    private ExploitUtil exploitUtil;
    private ExploitPlayerManager exploitPlayerManager;
    private ItemsFixModule itemsFixModule;
    private NotificationsModule notificationsModule;
    private PacketsModule packetsModule;
    private String version;
    private boolean checkLectern;
    private ItemStack AIR = new ItemStack(Material.AIR);

    PacketReceiveListener(ExploitUtil exploitUtil, ModuleManager moduleManager) {
        this.exploitUtil = exploitUtil;
        this.exploitPlayerManager = moduleManager.getExploitPlayerManager();
        this.itemsFixModule = moduleManager.getItemsFixModule();
        this.notificationsModule = moduleManager.getNotificationsModule();
        this.packetsModule = moduleManager.getPacketsModule();
        this.version = Bukkit.getServer().getClass().getPackage().getName().split("\\.")[3];
        this.checkLectern = version.equals("v1_18_R1")
                || version.startsWith("v1_17") || version.startsWith("v1_16")
                || version.startsWith("v1_15") || version.startsWith("v1_14")
                || version.startsWith("v1_13") || version.startsWith("v1_12")
                || version.startsWith("v1_11") || version.startsWith("v1_10");
    }

    public void onPacketReceive(Cancellable event, HamsterPlayer hamsterPlayer, Player player,
            PacketWrapper packetWrapper) {
        String bypassPermission = packetsModule.getBypassPermission();

        if (bypassPermission != null && player.hasPermission(bypassPermission)) {
            return;
        }

        PacketType packetType = packetWrapper.getType();
        String packetName = packetWrapper.getName();
        String playerName = player.getName();
        Map<String, String> strings = packetWrapper.getStrings();
        BukkitExploitPlayer exploitPlayer = exploitPlayerManager.get(player);
        double dataVls = packetsModule.getDataVls();
        Map<String, Integer> integers = packetWrapper.getIntegers();
        InventoryView inventoryView = player.getOpenInventory();
        double windowClick = packetsModule.getWindowClick();
        double setCreativeSlot = packetsModule.getSetCreativeSlot();

        exploitPlayer.addVls(event, null, hamsterPlayer, packetsModule, packetsModule.getMultiplier(packetName),
                "Packet Rate");

        if (packetsModule.isBlacklisted(packetName)) {
            String reason = "[" + packetName + "] " + playerName + " sent a Blacklisted packet!";

            exploitUtil.cancelExploit(event, hamsterPlayer, player, reason, 0, "Blacklist");
            return;
        }

        if (packetType == PacketType.PacketPlayInCustomPayload) {
            if (!strings.isEmpty()) {
                String tag = strings.values().iterator().next();
                double tagVls = packetsModule.getTagVls();
                double bookVls = packetsModule.getBookVls();

                if (tagVls > 0 && (tag == null || tag.trim().isEmpty())) {
                    String reason = "[" + packetName + "|Tag] " + playerName
                            + " sent a CustomPayload packet without TAG! Added vls: " + tagVls;

                    exploitUtil.cancelExploit(event, hamsterPlayer, player, reason, tagVls, "Invalid Payload");
                    return;
                } else if (bookVls > 0
                        && (tag.equals("MC|BEdit") || tag.equals("MC|BSign") || tag.equals("MC|BOpen"))) {
                    PlayerInventory playerInventory = player.getInventory();
                    ItemStack itemInHand = playerInventory.getItem(playerInventory.getHeldItemSlot());

                    if (itemInHand != null && !itemInHand.getType().toString().contains("BOOK")) {
                        String reason = "[" + packetName + "|Book] " + playerName + " tried to send a " + tag
                                + " CustomPayload packet without a book in hand!";

                        exploitUtil.cancelExploit(event, hamsterPlayer, player, reason, bookVls, "Payload No Book");
                        return;
                    }
                } else if (tag.equals("MC|AdvCdm") && !player.isOp()) {
                    String reason = "[" + packetName + "|Command Block] " + playerName + " tried to send a " + tag
                            + " CustomPayload packet without being op!";

                    exploitUtil.cancelExploit(event, hamsterPlayer, player, reason, bookVls, "Payload Not Operator");
                    return;
                }

                exploitPlayer.addVls(event, hamsterPlayer, packetsModule, packetsModule.getMultiplier(tag));
            } else {
                notificationsModule.debug("[" + packetName + "] " + playerName + " sent a empty CustomPayload packet!");

                event.setCancelled(true);
            }
        }

        // Check if Window Click vls is more than 0
        if (windowClick > 0) {
            // Check if the packet is Window Click
            if (packetType == PacketType.PacketPlayInWindowClick) {
                // Get the top inventory
                Inventory topInventory = inventoryView.getTopInventory();

                // Check if the top inventory is lectern
                if (topInventory.getType().name().equals("LECTERN")) {
                    if (this.checkLectern) {
                        if (integers.containsKey("a") && integers.get("a") == 1) {
                            String reason = "[" + packetName + "|WindowClick] " + playerName
                                    + " tried to quick move on a lectern! Added vls: "
                                    + windowClick;

                            exploitUtil.cancelExploit(event, hamsterPlayer, player, reason, windowClick,
                                    "Lectern Crash");
                            return;
                        } else {
                            if (integers.containsKey("b") && integers.get("b") == 1) {
                                String reason = "[" + packetName + "|WindowClick] " + playerName
                                        + " tried to quick move on a lectern! Added vls: "
                                        + windowClick;

                                exploitUtil.cancelExploit(event, hamsterPlayer, player, reason, windowClick,
                                        "Lectern Crash");
                                return;
                            }
                        }
                    }
                }

                // Check if the slot variable is set
                boolean containsSlot = integers.containsKey("slot");

                // Sometimes, d is used as slot
                boolean containsD = integers.containsKey("d");

                if (containsSlot || containsD) {
                    // Get the clicked slot
                    int slot = containsSlot ? integers.get("slot") : integers.get("d");

                    // Get the maximum slot index
                    int maxSlots = inventoryView.countSlots() - 1;

                    // -999 and -1 are legit slots
                    if (slot != -999 && slot != -1) {
                        // Check if the slot is negative
                        if (slot < 0) {
                            String reason = "[" + packetName + "|WindowClick] " + playerName
                                    + " sent a slot less than 0 and not [-999 or -1]! Slot: " + slot + " Added vls: "
                                    + windowClick;
                            exploitUtil.cancelExploit(event, hamsterPlayer, player, reason, windowClick,
                                    "Invalid Slot");
                            return;
                        } else {
                            // Try to get an item in that slot
                            // If this check generates an exception, it means it blocked the exploit
                            try {
                                inventoryView.getItem(slot);
                            } catch (Exception ex) {
                                String reason = "[" + packetName + "|WindowClick] " + playerName
                                        + " exceeded max available slots! (" + slot + "/" + maxSlots + ") Added vls: "
                                        + windowClick;
                                exploitUtil.cancelExploit(event, hamsterPlayer, player, reason, windowClick,
                                        "Large/Short Slot");
                                return;
                            }
                        }
                    }
                }
            }
        }

        if (setCreativeSlot > 0 && packetType == PacketType.PacketPlayInSetCreativeSlot
                && player.getGameMode() != GameMode.CREATIVE) {
            String reason = "[" + packetName + "|SetCreativeSlot] " + playerName
                    + " sent SET_CREATIVE_SLOT without CREATIVE! Added vls: " + setCreativeSlot;

            exploitUtil.cancelExploit(event, hamsterPlayer, player, reason, setCreativeSlot,
                    "Creative Packet No Creative");
            return;
        }

        if (dataVls > 0) {
            if (packetType == PacketType.PacketPlayInUpdateSign
                    && !exploitUtil.checkSign(strings.values().toArray(new String[0]))) {
                String reason = "[" + packetName + "|Data] " + playerName
                        + " has sent a too big sign packet! Added vls: " + dataVls;

                exploitUtil.cancelExploit(event, hamsterPlayer, player, reason, dataVls, "Too Big Sign");
                return;
            }
        }

        if (dataVls > 0) {
            for (Double val : packetWrapper.getDouble().values()) {
                if (!Double.isFinite(val)) {
                    String reason = "[" + packetName + "|Data] " + playerName
                            + " sent an invalid double: " + val + "! Added vls: " + dataVls;

                    exploitUtil.cancelExploit(event, hamsterPlayer, player, reason, dataVls, "Invalid Double");
                    return;
                }
            }

            for (Float val : packetWrapper.getFloats().values()) {
                if (!Float.isFinite(val)) {
                    String reason = "[" + packetName + "|Data] " + playerName
                            + " sent an invalid float: " + val + "! Added vls: " + dataVls;

                    exploitUtil.cancelExploit(event, hamsterPlayer, player, reason, dataVls, "Invalid Float");
                    return;
                }
            }
        }

        boolean creativeMode = packetType == PacketType.PacketPlayInSetCreativeSlot && itemsFixModule.isEnabled();

        for (Entry<String, ItemStack> itemsEntry : packetWrapper.getItems().entrySet()) {
            ItemStack item = itemsEntry.getValue();

            if (item != null) {
                if (dataVls > 0) {
                    CheckItemResult result = exploitUtil.checkItem(item);

                    if (result != CheckItemResult.VALID_ITEM) {
                        String reason = "[" + packetName + "] " + playerName
                                + " sent an invalid item! (" + result + ") Added vls: " + dataVls;

                        exploitUtil.cancelExploit(event, hamsterPlayer, player, reason, dataVls, "Invalid Item");
                        return;
                    }
                }

                if (creativeMode && !exploitPlayer.isBypassItemsFix()) {
                    String blacklisted = exploitUtil.clearIfBlacklisted(item);

                    if (blacklisted != null) {
                        packetWrapper.write(itemsEntry.getKey(), AIR);
                        notificationsModule.debug(
                                playerName + " had a creative item blacklisted by ExploitFixer! (" + blacklisted + ")");
                    } else {
                        // Check if whitelist system is enabled
                        if (itemsFixModule.isWhitelistItems()) {
                            // Create the slot variable
                            int slot = 0;

                            // Get the slot from a packet integer
                            if (integers.size() == 1) {
                                for (int value : integers.values()) {
                                    slot = value;
                                }
                            }

                            // Check the slot item and if exists, whitelist it
                            if (slot != -1 && slot != -999) {
                                // Check for window click exploit
                                try {
                                    // Get the item by the slot
                                    ItemStack inventoryItem = inventoryView.getItem(slot);

                                    if (inventoryItem != null && inventoryItem.getType() != Material.AIR) {
                                        // Whitelist already created item
                                        itemsFixModule.setWhitelisted(inventoryItem);
                                        return;
                                    }
                                } catch (IndexOutOfBoundsException ex) {
                                    // Window click exploit detected
                                    String reason = "[" + packetName + "|PacketPlayInSetCreativeSlot] " + playerName
                                            + " exceeded max available slots! (" + slot + "/"
                                            + inventoryView.countSlots()
                                            + ") Added vls: "
                                            + windowClick;

                                    // Cancel and notify
                                    exploitUtil.cancelExploit(event, hamsterPlayer, player, reason, windowClick,
                                            "Large/Short Slot");
                                    return;
                                }
                            }

                            // Check if the item is not whitelisted
                            if (!itemsFixModule.isWhitelisted(item)) {
                                // Fix the newly created item
                                packetWrapper.write(itemsEntry.getKey(), itemsFixModule.fixItem(item));

                                // Notify about this
                                notificationsModule.debug(playerName + " had a creative item fixed by ExploitFixer!");
                                return;
                            }
                        } else { // Whitelist system not enabled
                            // Fix the item
                            packetWrapper.write(itemsEntry.getKey(), itemsFixModule.fixItem(item));

                            // Notify about this
                            notificationsModule.debug(playerName + " had a creative item fixed by ExploitFixer!");
                        }
                    }
                }
            }
        }

        // Add the packet to the player instance to count it
        exploitPlayer.addPacket(String.valueOf(packetType));

        // Add the packet to the notifications module to count it
        notificationsModule.addPacketDebug(String.valueOf(packetType));
    }

    @EventHandler(ignoreCancelled = true, priority = EventPriority.LOWEST)
    public void onPacketReceive(PacketReceiveEvent event) {
        if (!packetsModule.isEnabled()) {
            return;
        }

        HamsterPlayer hamsterPlayer = event.getHamsterPlayer();

        onPacketReceive(event, hamsterPlayer, hamsterPlayer.getPlayer(), event.getPacket());
    }
}
