package dev._2lstudios.exploitfixer.utils;

import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.plugin.Plugin;
import org.bukkit.scheduler.BukkitScheduler;

import dev._2lstudios.exploitfixer.configuration.BukkitConfiguration;
import dev._2lstudios.exploitfixer.configuration.IConfiguration;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.util.logging.Logger;

public class BukkitConfigurationUtil implements IConfigurationUtil {
	private static String DATA_FOLDER_PLACEHOLDER = "%datafolder%";
	private String dataFolderPath;
	private Logger logger;
	private Plugin plugin;
	private BukkitScheduler scheduler;
	private ClassLoader classLoader;

	public BukkitConfigurationUtil(Plugin plugin) {
		this.plugin = plugin;
		this.scheduler = plugin.getServer().getScheduler();
		this.logger = plugin.getLogger();
		this.classLoader = plugin.getClass().getClassLoader();
		this.dataFolderPath = plugin.getDataFolder().toString();
	}

	private void createParentFolder(File file) {
		File parentFile = file.getParentFile();

		if (parentFile != null) {
			parentFile.mkdirs();
		}
	}

	public IConfiguration get(String path) {
		File file = new File(path.replace(DATA_FOLDER_PLACEHOLDER, dataFolderPath));

		if (file.exists()) {
			return new BukkitConfiguration(YamlConfiguration.loadConfiguration(file));
		} else {
			return new BukkitConfiguration(new YamlConfiguration());
		}
	}

	public void create(String rawPath, String resourcePath) {
		String path = rawPath.replace(DATA_FOLDER_PLACEHOLDER, dataFolderPath);

		try {
			File configFile = new File(path);

			if (!configFile.exists()) {
				InputStream inputStream = classLoader.getResourceAsStream(resourcePath);

				createParentFolder(configFile);

				if (inputStream != null) {
					Files.copy(inputStream, configFile.toPath());
				} else {
					configFile.createNewFile();
				}

				logger.info("File '" + path + "' has been created!");
			}
		} catch (IOException e) {
			logger.info("Unable to create '" + path + "'!");
		}
	}

	public void save(IConfiguration configuration, String rawPath) {
		String path = rawPath.replace(DATA_FOLDER_PLACEHOLDER, dataFolderPath);

		scheduler.runTaskAsynchronously(plugin, () -> {
			try {
				((YamlConfiguration) configuration.getObject()).save(path);

				logger.info("File '" + path + "' has been saved!");
			} catch (IOException e) {
				logger.info("Unable to save '" + path + "'!");
			}
		});
	}

	public void delete(String rawPath) {
		String path = rawPath.replace(DATA_FOLDER_PLACEHOLDER, dataFolderPath);

		scheduler.runTaskAsynchronously(plugin, () -> {
			try {
				Files.delete(new File(path).toPath());

				logger.info("File '" + path + "' has been removed!");
			} catch (IOException e) {
				logger.info("Unable to remove '" + path + "'!");
			}
		});
	}
}